{
	"info": {
		"_postman_id": "25632b98-5918-4908-8a85-9500d8a81afa",
		"name": "Attendace Service Postman Scripts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Attendance Register",
			"item": [
				{
					"name": "Create Attendance Register - Success - Single Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"pm.test(\"Attendance Registers are required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.attendanceRegister).to.not.be.undefined;",
									"    pm.expect(req.attendanceRegister).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var register = req.attendanceRegister[0];",
									"    pm.expect(register.tenantId).to.be.not.null;",
									"    pm.expect(register.tenantId).to.be.not.undefined;",
									"    pm.expect(register.tenantId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Register Name is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var register = req.attendanceRegister[0];",
									"    pm.expect(register.name).to.be.not.null;",
									"    pm.expect(register.name).to.be.not.undefined;",
									"    pm.expect(register.name).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Register start date is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var register = req.attendanceRegister[0];",
									"    pm.expect(register.startDate).to.be.not.null;",
									"    pm.expect(register.startDate).to.be.not.undefined;",
									"    pm.expect(register.startDate).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Start date should be less than end date\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var register = req.attendanceRegister[0];",
									"    if (Number.isFinite(register.endDate) && (register.endDate != undefined || register.endDate != null )) {",
									"        pm.expect(register.endDate).to.be.not.below(register.startDate);",
									"    }",
									"    }",
									");",
									"",
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200))",
									");",
									"",
									"pm.test(\"Register Number is enriched\", function () {",
									"    var res = pm.response.json();",
									"    var registerNumber = res.attendanceRegister[0].registerNumber;",
									"    pm.expect(registerNumber.substring(0,2)).to.eql(\"WR\");",
									"    }",
									");",
									"",
									"pm.test(\"Register status is set to Active if status not passed\", function () {",
									"   var res = pm.response.json();",
									"    var status = res.attendanceRegister[0].status;",
									"    pm.expect(status).to.eql(\"ACTIVE\");",
									"    }",
									");",
									"",
									"pm.test(\"Staff is created for register\", function () {",
									"    var res = pm.response.json();",
									"    var staff = res.attendanceRegister[0].staff;",
									"    pm.expect(staff).to.be.not.null;",
									"    pm.expect(staff).to.be.not.undefined;",
									"    pm.expect(staff.length).to.eql(1);",
									"    }",
									");",
									"",
									"pm.test(\"Staff created have same userId as UUID of user\", function () {",
									"    var res = pm.response.json();",
									"    var userInRequest = res.attendanceRegister[0].auditDetails.createdBy;",
									"    var staff = res.attendanceRegister[0].staff;",
									"    pm.expect(staff[0].userId).to.eql(userInRequest);",
									"    }",
									");",
									"",
									"let responseData = pm.response.json();",
									"pm.collectionVariables.set(\"tenantId\", responseData.attendanceRegister[0].tenantId);",
									"pm.collectionVariables.set(\"stateLevelTenant\", responseData.attendanceRegister[0].tenantId.split('.', 1)[0]);",
									"pm.collectionVariables.set(\"registerId\", responseData.attendanceRegister[0].id);",
									"pm.collectionVariables.set(\"registerNumber\", responseData.attendanceRegister[0].registerNumber);",
									"",
									"pm.collectionVariables.set(\"registerStartDate\", responseData.attendanceRegister[0].startDate);",
									"pm.collectionVariables.set(\"registerEndDate\", responseData.attendanceRegister[0].endDate);",
									"pm.collectionVariables.set(\"invalidRegisterEndDate\", responseData.attendanceRegister[0].endDate+24*60*60*1000);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"tenantId\", \"pg.citya\");",
									"// pm.collectionVariables.set(\"individualId\", \"2d12b93a-829b-4aef-9073-5418e2315355\");",
									"//dev",
									"pm.collectionVariables.set(\"individualId-1\", \"6731ed44-2407-457d-aa3e-70ffbd1d6d21\");",
									"pm.collectionVariables.set(\"individualId-2\", \"311b13c2-0029-4679-8723-fe6f57870a35\");",
									"",
									"",
									"//qa",
									"// pm.collectionVariables.set(\"individualId-1\", \"3ff2861e-8bbd-4431-a6b4-6f6a1c116356\");",
									"// pm.collectionVariables.set(\"individualId-2\", \"a7d7ec01-68e0-428d-8762-c81e2fd5c864\");",
									"",
									"",
									"pm.collectionVariables.set(\"referenceId\", \"test_contract_number_01\");",
									"pm.collectionVariables.set(\"serviceCode\", \"WORKS-CONTRACT\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"ver\": null,\n        \"ts\": null,\n        \"action\": null,\n        \"did\": null,\n        \"key\": null,\n        \"msgId\": \"Create Attendance Register\",\n        \"authToken\": \"{{token}}\"\n    },\n    \"attendanceRegister\": [\n        {\n            \"tenantId\": \"{{tenantId}}\",\n            \"name\": \"TestRegister_01\",\n            \"referenceId\": \"{{referenceId}}+{{$randomPhoneNumber}}\",\n            \"serviceCode\": \"{{serviceCode}}\",\n            \"startDate\": 1640995200000,\n            \"endDate\": 1703980800000\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attendance Register - Success - Multiple Registers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"pm.test(\"Attendance Registers are required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.attendanceRegister).to.not.be.undefined;",
									"    pm.expect(req.attendanceRegister).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.attendanceRegister.forEach(register => {",
									"         pm.expect(register.tenantId).to.be.not.null;",
									"         pm.expect(register.tenantId).to.be.not.undefined;",
									"         pm.expect(register.tenantId).not.to.eql(\"\");",
									"    });",
									"    }",
									");",
									"",
									"pm.test(\"Register Name is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.attendanceRegister.forEach(register => {",
									"         pm.expect(register.name).to.be.not.null;",
									"         pm.expect(register.name).to.be.not.undefined;",
									"         pm.expect(register.name).not.to.eql(\"\");",
									"    });",
									"    }",
									");",
									"",
									"pm.test(\"Register start date is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.attendanceRegister.forEach(register => {",
									"         pm.expect(register.startDate).to.be.not.null;",
									"         pm.expect(register.startDate).to.be.not.undefined;",
									"         pm.expect(register.startDate).not.to.eql(\"\");",
									"    });",
									"    }",
									");",
									"    ",
									"",
									"pm.test(\"Start date should be less than end date\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.attendanceRegister.forEach(register => {",
									"        if (Number.isFinite(register.endDate) && (register.endDate != undefined || register.endDate != null )) {",
									"            pm.expect(register.endDate).to.be.not.below(register.startDate);",
									"        }",
									"    });",
									"    }",
									");",
									"",
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200))",
									");",
									"",
									"pm.test(\"Register Number is enriched\", function () {",
									"    var res = pm.response.json();",
									"    res.attendanceRegister.forEach(register => {",
									"        var registerNumber = register.registerNumber;",
									"        pm.expect(registerNumber.substring(0,2)).to.eql(\"WR\");",
									"    });",
									"    }",
									");",
									"",
									"pm.test(\"Staff is created for register\", function () {",
									"    var res = pm.response.json();",
									"    res.attendanceRegister.forEach(register => {",
									"        var staff = register.staff;",
									"         pm.expect(staff).to.be.not.null;",
									"         pm.expect(staff).to.be.not.undefined;",
									"         pm.expect(staff.length).to.eql(1);",
									"    });    ",
									"    }",
									");",
									"",
									"pm.test(\"Staff created have same userId as UUID of user\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var res = pm.response.json();",
									"    res.attendanceRegister.forEach(register => {",
									"        var userInRequest = register.auditDetails.createdBy;",
									"        var staff =register.staff;",
									"        pm.expect(staff[0].userId).to.eql(userInRequest);",
									"    });  ",
									"    }",
									");",
									"",
									"let responseData = pm.response.json();",
									"pm.collectionVariables.set(\"registerId2\", responseData.attendanceRegister[1].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"ver\": null,\n        \"ts\": null,\n        \"action\": null,\n        \"did\": null,\n        \"key\": null,\n        \"msgId\": \"Create Attendance Register\",\n        \"authToken\": \"{{token}}\"\n    },\n    \"attendanceRegister\": [\n        {\n            \"tenantId\": \"{{tenantId}}\",\n            \"name\": \"TestRegister_01\",\n            \"referenceId\": \"{{referenceId}}+{{$randomPhoneNumber}}\",\n            \"serviceCode\": \"{{serviceCode}}\",\n            \"startDate\": 1640995200000,\n            \"endDate\": 1703980800000\n        },\n        {\n            \"tenantId\": \"{{tenantId}}\",\n            \"name\": \"TestRegister_02\",\n            \"referenceId\": \"{{referenceId}}+{{$randomPhoneNumber}}\",\n            \"serviceCode\": \"{{serviceCode}}\",\n            \"startDate\": 1640995200000,\n            \"additionalDetails\": {}\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attendance Register - Validation Error - Registers not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400)));",
									"",
									"pm.test(\"Correct Error with message and code is received\", function () {",
									"    var res = pm.response.json();",
									"    var code = res.Errors[0].code;",
									"    var message = res.Errors[0].message;",
									"    pm.expect(code).to.eql(\"ATTENDANCE_REGISTER\");",
									"    pm.expect(message).to.eql(\"Attendance Register is mandatory\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"ver\": null,\n        \"ts\": null,\n        \"action\": null,\n        \"did\": null,\n        \"key\": null,\n        \"msgId\": \"Create Attendance Register\",\n        \"authToken\": \"{{token}}\"\n    },\n    \"attendanceRegister\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attendance Register - Validation Error - TenantId not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400)));",
									"",
									"pm.test(\"Correct Error with message and code is received\", function () {",
									"    var res = pm.response.json();",
									"    var code = res.Errors[0].code;",
									"    var message = res.Errors[0].message;",
									"    pm.expect(code).to.eql(\"TENANT_ID\");",
									"    pm.expect(message).to.eql(\"Tenant is mandatory\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"ver\": null,\n        \"ts\": null,\n        \"action\": null,\n        \"did\": null,\n        \"key\": null,\n        \"msgId\": \"Create Attendance Register\",\n        \"authToken\": \"{{token}}\"\n    },\n    \"attendanceRegister\": [\n        {\n            \"name\": \"TestRegister_01\",\n            \"startDate\": 1640995200000,\n            \"endDate\": 1703980800000\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attendance Register - Validation Error - Name not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400)));",
									"",
									"pm.test(\"Correct Error with message and code is received\", function () {",
									"    var res = pm.response.json();",
									"    var code = res.Errors[0].code;",
									"    var message = res.Errors[0].message;",
									"    pm.expect(code).to.eql(\"NAME\");",
									"    pm.expect(message).to.eql(\"Name is mandatory\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"ver\": null,\n        \"ts\": null,\n        \"action\": null,\n        \"did\": null,\n        \"key\": null,\n        \"msgId\": \"Create Attendance Register\",\n        \"authToken\": \"{{token}}\"\n    },\n    \"attendanceRegister\": [\n        {\n            \"tenantId\": \"{{tenantId}}\",\n            \"referenceId\": \"{{referenceId}}+{{$randomPhoneNumber}}\",\n            \"serviceCode\": \"{{serviceCode}}\",\n            \"startDate\": 1640995200000,\n            \"endDate\": 1703980800000\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attendance Register - Validation Error - Start Date not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400)));",
									"",
									"pm.test(\"Correct Error with message and code is received\", function () {",
									"    var res = pm.response.json();",
									"    var code = res.Errors[0].code;",
									"    var message = res.Errors[0].message;",
									"    pm.expect(code).to.eql(\"START_DATE\");",
									"    pm.expect(message).to.eql(\"Start date is mandatory\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"ver\": null,\n        \"ts\": null,\n        \"action\": null,\n        \"did\": null,\n        \"key\": null,\n        \"msgId\": \"Create Attendance Register\",\n        \"authToken\": \"{{token}}\"\n    },\n    \"attendanceRegister\": [\n        {\n            \"tenantId\": \"{{tenantId}}\",\n            \"name\": \"TestRegister_01\",\n            \"endDate\": 1703980800000\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attendance Register - Validation Error - Start Date greater than End Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400)));",
									"",
									"pm.test(\"Correct Error with message and code is received\", function () {",
									"    var res = pm.response.json();",
									"    var code = res.Errors[0].code;",
									"    var message = res.Errors[0].message;",
									"    pm.expect(code).to.eql(\"DATE\");",
									"    pm.expect(message).to.eql(\"Start date should be less than end date\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"ver\": null,\n        \"ts\": null,\n        \"action\": null,\n        \"did\": null,\n        \"key\": null,\n        \"msgId\": \"Create Attendance Register\",\n        \"authToken\": \"{{token}}\"\n    },\n    \"attendanceRegister\": [\n        {\n            \"tenantId\": \"{{tenantId}}\",\n            \"name\": \"TestRegister_01\",\n            \"startDate\": 1803980800000,\n            \"endDate\": 1703980800000\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attendance Register - Validation Error - Start Date Equal to 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400)));",
									"",
									"pm.test(\"Correct Error with message and code is received\", function () {",
									"    var res = pm.response.json();",
									"    var code = res.Errors[0].code;",
									"    var message = res.Errors[0].message;",
									"    pm.expect(code).to.eql(\"START_DATE\");",
									"    pm.expect(message).to.eql(\"Start date is mandatory\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"ver\": null,\n        \"ts\": null,\n        \"action\": null,\n        \"did\": null,\n        \"key\": null,\n        \"msgId\": \"Create Attendance Register\",\n        \"authToken\": \"{{token}}\"\n    },\n    \"attendanceRegister\": [\n        {\n            \"tenantId\": \"{{tenantId}}\",\n            \"name\": \"TestRegister_01\",\n            \"startDate\": 0,\n            \"endDate\": 1703980800000\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Attendance Register - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200)));",
									"",
									"pm.test(\"Register Search response is received\", function () {",
									"    var res = pm.response.json();",
									"    var id = res.attendanceRegister[0].id;",
									"    pm.expect(id).to.eql(pm.collectionVariables.get(\"registerId\"));",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"action\": \"\",\n        \"did\": 1,\n        \"key\": \"\",\n        \"msgId\": \"20170310130900|en_IN\",\n        \"requesterId\": \"\",\n        \"ts\": 1513579888683,\n        \"ver\": \".01\",\n        \"authToken\": \"{{token}}\"\n        }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_search?tenantId={{tenantId}}&ids={{registerId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_search"
							],
							"query": [
								{
									"key": "tenantId",
									"value": "{{tenantId}}"
								},
								{
									"key": "ids",
									"value": "{{registerId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Attendance Register - Success - Unassociated AttendeeId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200)));",
									"",
									"pm.test(\"Register Search response is received\", function () {",
									"    var res = pm.response.json();",
									"    pm.expect(res.attendanceRegister.length).to.equal(0);",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"action\": \"\",\n        \"did\": 1,\n        \"key\": \"\",\n        \"msgId\": \"20170310130900|en_IN\",\n        \"requesterId\": \"\",\n        \"ts\": 1513579888683,\n        \"ver\": \".01\",\n        \"authToken\": \"{{token}}\"\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_search?tenantId={{tenantId}}&ids={{registerId}}&attendeeId={{$guid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_search"
							],
							"query": [
								{
									"key": "tenantId",
									"value": "{{tenantId}}"
								},
								{
									"key": "ids",
									"value": "{{registerId}}"
								},
								{
									"key": "attendeeId",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Attendance Register - Success - Unassociated StaffId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200)));",
									"",
									"pm.test(\"Register Search response is received\", function () {",
									"    var res = pm.response.json();",
									"    pm.expect(res.attendanceRegister.length).to.equal(0);",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"action\": \"\",\n        \"did\": 1,\n        \"key\": \"\",\n        \"msgId\": \"20170310130900|en_IN\",\n        \"requesterId\": \"\",\n        \"ts\": 1513579888683,\n        \"ver\": \".01\",\n        \"authToken\": \"{{token}}\"\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_search?tenantId={{tenantId}}&ids={{registerId}}&staffId={{$guid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_search"
							],
							"query": [
								{
									"key": "tenantId",
									"value": "{{tenantId}}"
								},
								{
									"key": "ids",
									"value": "{{registerId}}"
								},
								{
									"key": "staffId",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Attendance Register - Success - SuperUser - Non existing RegisterID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200)));",
									"",
									"pm.test(\"Register Search response is received\", function () {",
									"    var res = pm.response.json();",
									"    pm.expect(res.attendanceRegister.length).to.equal(0);",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"action\": \"\",\n        \"did\": 1,\n        \"key\": \"\",\n        \"msgId\": \"20170310130900|en_IN\",\n        \"requesterId\": \"\",\n        \"ts\": 1513579888683,\n        \"ver\": \".01\",\n        \"authToken\": \"{{token}}\"\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_search?tenantId={{tenantId}}&ids={{$guid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_search"
							],
							"query": [
								{
									"key": "tenantId",
									"value": "{{tenantId}}"
								},
								{
									"key": "ids",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Attendance Register - Validation Error - Unassociated Register Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200)));",
									"",
									"pm.test(\"Register Search response is received\", function () {",
									"    var res = pm.response.json();",
									"    var code = res.attendanceRegister.length;",
									"    pm.expect(code).to.eql(0);",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"action\": \"\",\n        \"did\": 1,\n        \"key\": \"\",\n        \"msgId\": \"20170310130900|en_IN\",\n        \"requesterId\": \"\",\n        \"ts\": 1513579888683,\n        \"ver\": \".01\",\n        \"authToken\": \"{{token}}\"\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_search?tenantId={{tenantId}}&ids=96d1055c-0251-498d-b98d-26d6c232925f",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_search"
							],
							"query": [
								{
									"key": "tenantId",
									"value": "{{tenantId}}"
								},
								{
									"key": "ids",
									"value": "96d1055c-0251-498d-b98d-26d6c232925f"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Attendance Register - Validation Error - Tenant Id not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400)));",
									"",
									"pm.test(\"Correct Error with message and code is received\", function () {",
									"    var res = pm.response.json();",
									"    var code = res.Errors[0].code;",
									"    var message = res.Errors[0].message;",
									"    pm.expect(code).to.eql(\"TENANT_ID\");",
									"    pm.expect(message).to.eql(\"Tenant is mandatory\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"action\": \"\",\n        \"did\": 1,\n        \"key\": \"\",\n        \"msgId\": \"20170310130900|en_IN\",\n        \"requesterId\": \"\",\n        \"ts\": 1513579888683,\n        \"ver\": \".01\",\n        \"authToken\": \"{{token}}\"\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_search?ids={{registerId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_search"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{registerId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Attendance Register - Success - Single Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"",
									"pm.test(\"Attendance Registers are required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.attendanceRegister).to.not.be.undefined;",
									"    pm.expect(req.attendanceRegister).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var register = req.attendanceRegister[0];",
									"    pm.expect(register.tenantId).to.be.not.null;",
									"    pm.expect(register.tenantId).to.be.not.undefined;",
									"    pm.expect(register.tenantId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Register Id is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var register = req.attendanceRegister[0];",
									"    pm.expect(register.id).to.be.not.null;",
									"    pm.expect(register.id).to.be.not.undefined;",
									"    pm.expect(register.id).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Register Name is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var register = req.attendanceRegister[0];",
									"    pm.expect(register.name).to.be.not.null;",
									"    pm.expect(register.name).to.be.not.undefined;",
									"    pm.expect(register.name).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Register start date is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var register = req.attendanceRegister[0];",
									"    pm.expect(register.startDate).to.be.not.null;",
									"    pm.expect(register.startDate).to.be.not.undefined;",
									"    pm.expect(register.startDate).not.to.eql(\"\");",
									"    }",
									");",
									"    ",
									"",
									"pm.test(\"Start date should be less than end date\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var register = req.attendanceRegister[0];",
									"    if (Number.isFinite(register.endDate) && (register.endDate != undefined || register.endDate != null )) {",
									"        pm.expect(register.endDate).to.be.not.below(register.startDate);",
									"    }",
									"    }",
									");",
									"",
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200))",
									");",
									"",
									"pm.test(\"Staff is created for register\", function () {",
									"    var res = pm.response.json();",
									"    var staff = res.attendanceRegister[0].staff;",
									"    pm.expect(staff).to.be.not.null;",
									"    pm.expect(staff).to.be.not.undefined;",
									"    pm.expect(staff.length).to.eql(1);",
									"    }",
									");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"ver\": null,\n        \"ts\": null,\n        \"action\": null,\n        \"did\": null,\n        \"key\": null,\n        \"msgId\": \"Create Attendance Register\",\n        \"authToken\": \"{{token}}\"\n    },\n    \"attendanceRegister\": [\n        {\n            \"id\": \"{{registerId}}\",\n            \"tenantId\": \"{{tenantId}}\",\n            \"name\": \"TestRegister_010\",\n            \"startDate\": 1640995200000,\n            \"endDate\": 1703980800000,\n            \"status\": \"ACTIVE\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Attendance Register - Success - Multiple Registers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"",
									"pm.test(\"Attendance Registers are required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.attendanceRegister).to.not.be.undefined;",
									"    pm.expect(req.attendanceRegister).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.attendanceRegister.forEach(register => {",
									"         pm.expect(register.tenantId).to.be.not.null;",
									"         pm.expect(register.tenantId).to.be.not.undefined;",
									"         pm.expect(register.tenantId).not.to.eql(\"\");",
									"    });",
									"    }",
									");",
									"",
									"pm.test(\"Register Id is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.attendanceRegister.forEach(register => {",
									"         pm.expect(register.id).to.be.not.null;",
									"         pm.expect(register.id).to.be.not.undefined;",
									"         pm.expect(register.id).not.to.eql(\"\");",
									"    });",
									"    }",
									");",
									"",
									"pm.test(\"Register Name is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.attendanceRegister.forEach(register => {",
									"         pm.expect(register.name).to.be.not.null;",
									"         pm.expect(register.name).to.be.not.undefined;",
									"         pm.expect(register.name).not.to.eql(\"\");",
									"    });",
									"    }",
									");",
									"",
									"pm.test(\"Register start date is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.attendanceRegister.forEach(register => {",
									"         pm.expect(register.startDate).to.be.not.null;",
									"         pm.expect(register.startDate).to.be.not.undefined;",
									"         pm.expect(register.startDate).not.to.eql(\"\");",
									"    });",
									"    }",
									");",
									"    ",
									"",
									"pm.test(\"Start date should be less than end date\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.attendanceRegister.forEach(register => {",
									"        if (Number.isFinite(register.endDate) && (register.endDate != undefined || register.endDate != null )) {",
									"            pm.expect(register.endDate).to.be.not.below(register.startDate);",
									"        }",
									"    });",
									"    }",
									");",
									"",
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200))",
									");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"ver\": null,\n        \"ts\": null,\n        \"action\": null,\n        \"did\": null,\n        \"key\": null,\n        \"msgId\": \"Create Attendance Register\",\n        \"authToken\": \"{{token}}\"\n    },\n    \"attendanceRegister\": [\n        {\n            \"id\": \"{{registerId}}\",\n            \"tenantId\": \"{{tenantId}}\",\n            \"name\": \"TestRegister_010\",\n            \"startDate\": 1640995200000,\n            \"endDate\": 1703980800000,\n            \"status\": \"ACTIVE\"\n        },\n        {\n            \"id\": \"{{registerId2}}\",\n            \"tenantId\": \"{{tenantId}}\",\n            \"name\": \"TestRegister_020\",\n            \"startDate\": 1640995200000,\n            \"endDate\": 1703980800000,\n            \"status\": \"INACTIVE\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Attendance Register - Validation Error - Register Id not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400)));",
									"",
									"pm.test(\"Correct Error with message and code is received\", function () {",
									"    var res = pm.response.json();",
									"    var code = res.Errors[0].code;",
									"    var message = res.Errors[0].message;",
									"    pm.expect(code).to.eql(\"ATTENDANCE_REGISTER_ID\");",
									"    pm.expect(message).to.eql(\"Attendance register id is mandatory\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"ver\": null,\n        \"ts\": null,\n        \"action\": null,\n        \"did\": null,\n        \"key\": null,\n        \"msgId\": \"Create Attendance Register\",\n        \"authToken\": \"{{token}}\"\n    },\n    \"attendanceRegister\": [\n        {\n            \"tenantId\": \"{{tenantId}}\",\n            \"name\": \"TestRegister_010\",\n            \"startDate\": 1640995200000,\n            \"endDate\": 1703980800000,\n            \"status\": \"ACTIVE\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Attendance Register - Validation Error - Tenant Id not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400)));",
									"",
									"pm.test(\"Correct Error with message and code is received\", function () {",
									"    var res = pm.response.json();",
									"    var code = res.Errors[0].code;",
									"    var message = res.Errors[0].message;",
									"    pm.expect(code).to.eql(\"TENANT_ID\");",
									"    pm.expect(message).to.eql(\"Tenant is mandatory\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"ver\": null,\n        \"ts\": null,\n        \"action\": null,\n        \"did\": null,\n        \"key\": null,\n        \"msgId\": \"Create Attendance Register\",\n        \"authToken\": \"{{token}}\"\n    },\n    \"attendanceRegister\": [\n        {\n            \"id\": \"{{registerId}}\",\n            \"name\": \"TestRegister_010\",\n            \"startDate\": 1640995200000,\n            \"endDate\": 1703980800000,\n            \"status\": \"ACTIVE\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Attendance Register - Validation Error - Name not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400)));",
									"",
									"pm.test(\"Correct Error with message and code is received\", function () {",
									"    var res = pm.response.json();",
									"    var code = res.Errors[0].code;",
									"    var message = res.Errors[0].message;",
									"    pm.expect(code).to.eql(\"NAME\");",
									"    pm.expect(message).to.eql(\"Name is mandatory\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"ver\": null,\n        \"ts\": null,\n        \"action\": null,\n        \"did\": null,\n        \"key\": null,\n        \"msgId\": \"Create Attendance Register\",\n        \"authToken\": \"{{token}}\"\n    },\n    \"attendanceRegister\": [\n        {\n            \"id\": \"{{registerId}}\",\n            \"tenantId\": \"{{tenantId}}\",\n            \"startDate\": 1640995200000,\n            \"endDate\": 1703980800000,\n            \"status\": \"ACTIVE\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Attendance Register - Validation Error - Start Date not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400)));",
									"",
									"pm.test(\"Correct Error with message and code is received\", function () {",
									"    var res = pm.response.json();",
									"    var code = res.Errors[0].code;",
									"    var message = res.Errors[0].message;",
									"    pm.expect(code).to.eql(\"START_DATE\");",
									"    pm.expect(message).to.eql(\"Start date is mandatory\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"ver\": null,\n        \"ts\": null,\n        \"action\": null,\n        \"did\": null,\n        \"key\": null,\n        \"msgId\": \"Create Attendance Register\",\n        \"authToken\": \"{{token}}\"\n    },\n    \"attendanceRegister\": [\n        {\n            \"id\": \"{{registerId}}\",\n            \"tenantId\": \"{{tenantId}}\",\n            \"name\": \"TestRegister_010\",\n            \"endDate\": 1703980800000,\n            \"status\": \"ACTIVE\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/v1/_update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"v1",
								"_update"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Register Permission",
			"item": [
				{
					"name": "Staff - Enroll - Single Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"pm.test(\"Staff are required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.staff).to.not.be.undefined;",
									"    pm.expect(req.staff).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var staff = req.staff[0];",
									"    pm.expect(staff.tenantId).to.be.not.null;",
									"    pm.expect(staff.tenantId).to.be.not.undefined;",
									"    pm.expect(staff.tenantId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Staff registerId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var staff = req.staff[0];",
									"    pm.expect(staff.registerId).to.be.not.null;",
									"    pm.expect(staff.registerId).to.be.not.undefined;",
									"    pm.expect(staff.registerId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Staff userId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var staff = req.staff[0];",
									"    pm.expect(staff.userId).to.be.not.null;",
									"    pm.expect(staff.userId).to.be.not.undefined;",
									"    pm.expect(staff.userId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"",
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200))",
									");",
									"",
									"pm.test(\"Enrollment date is enriched\", function () {",
									"    var res = pm.response.json();",
									"    var enrollmentDate = res.staff[0].enrollmentDate;",
									"    pm.expect(enrollmentDate).to.be.not.null;",
									"    }",
									");",
									"",
									"// let requestData = JSON.parse(pm.request.body.raw);",
									"// pm.collectionVariables.set(\"userId\", requestData.staff[0].userId);",
									"",
									"let responseData = pm.response.json();",
									"pm.collectionVariables.set(\"userId\", responseData.staff[0].userId);",
									"console.log(pm.collectionVariables.get(\"userId\"));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"RequestInfo\":{\n      \"apiId\":\"mukta-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"Enroll the user to register\",\n      \"authToken\":\"{{token}}\"\n   },\n   \"staff\":[\n      {\n         \"registerId\":\"{{registerId}}\",\n         \"userId\":\"{{$randomUUID}}\",\n         \"tenantId\":\"{{tenantId}}\"\n      }\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/staff/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"staff",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Staff - Enroll - Validation Error - Staff already enrolled to the register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"pm.test(\"Staff is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.staff).to.not.be.undefined;",
									"    pm.expect(req.staff).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var staff = req.staff[0];",
									"    pm.expect(staff.tenantId).to.be.not.null;",
									"    pm.expect(staff.tenantId).to.be.not.undefined;",
									"    pm.expect(staff.tenantId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Staff registerId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var staff = req.staff[0];",
									"    pm.expect(staff.registerId).to.be.not.null;",
									"    pm.expect(staff.registerId).to.be.not.undefined;",
									"    pm.expect(staff.registerId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Staff userId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var staff = req.staff[0];",
									"    pm.expect(staff.userId).to.be.not.null;",
									"    pm.expect(staff.userId).to.be.not.undefined;",
									"    pm.expect(staff.userId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"",
									"pm.test(\"response is 400. Staff is already enrolled to the register\", () => ",
									"   pm.expect(pm.response.to.have.status(400))",
									");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.collectionVariables.get(\"userId\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"RequestInfo\":{\n      \"apiId\":\"mukta-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"Enroll the user to register\",\n      \"authToken\":\"{{token}}\"\n   },\n   \"staff\":[\n      {\n         \"registerId\":\"{{registerId}}\",\n         \"userId\":\"{{userId}}\",\n         \"tenantId\":\"{{tenantId}}\"\n      }\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/staff/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"staff",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Staff - Enroll - Validation Error - Duplicate staff objects not allowed in enrollment request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"pm.test(\"Staff are required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.staff).to.not.be.undefined;",
									"    pm.expect(req.staff).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"",
									"    req.staff.forEach(staff => {",
									"    pm.expect(staff.tenantId).to.be.not.null;",
									"    pm.expect(staff.tenantId).to.be.not.undefined;",
									"    pm.expect(staff.tenantId).not.to.eql(\"\");",
									"    });     ",
									"    }",
									");",
									"",
									"pm.test(\"Staff registerId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"     req.staff.forEach(staff => {",
									"     pm.expect(staff.registerId).to.be.not.null;",
									"    pm.expect(staff.registerId).to.be.not.undefined;",
									"    pm.expect(staff.registerId).not.to.eql(\"\");",
									"    });    ",
									"",
									"    }",
									");",
									"",
									"pm.test(\"Staff userId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.staff.forEach(staff => {",
									"     pm.expect(staff.userId).to.be.not.null;",
									"    pm.expect(staff.userId).to.be.not.undefined;",
									"    pm.expect(staff.userId).not.to.eql(\"\");",
									"    });    ",
									"    }",
									");",
									"",
									"",
									"pm.test(\"Response is 400. Duplicate objects in request\", () => ",
									"   pm.expect(pm.response.to.have.status(400))",
									");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"RequestInfo\":{\n      \"apiId\":\"mukta-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"Enroll the user to register\",\n      \"authToken\":\"{{token}}\"\n   },\n   \"staff\":[\n      {\n         \"registerId\":\"{{registerId}}\",\n         \"userId\":\"928ca23a-9bec-11ed-a8fc-0242ac120002\",\n         \"tenantId\":\"{{tenantId}}\"\n      },\n     {\n         \"registerId\":\"{{registerId}}\",\n         \"userId\":\"928ca23a-9bec-11ed-a8fc-0242ac120002\",\n         \"tenantId\":\"{{tenantId}}\"\n      }\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/staff/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"staff",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Staff - Enroll - Multiple staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"pm.test(\"Staff are required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.staff).to.not.be.undefined;",
									"    pm.expect(req.staff).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"",
									"    req.staff.forEach(staff => {",
									"    pm.expect(staff.tenantId).to.be.not.null;",
									"    pm.expect(staff.tenantId).to.be.not.undefined;",
									"    pm.expect(staff.tenantId).not.to.eql(\"\");",
									"    });     ",
									"    }",
									");",
									"",
									"pm.test(\"Staff registerId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"     req.staff.forEach(staff => {",
									"     pm.expect(staff.registerId).to.be.not.null;",
									"    pm.expect(staff.registerId).to.be.not.undefined;",
									"    pm.expect(staff.registerId).not.to.eql(\"\");",
									"    });    ",
									"",
									"    }",
									");",
									"",
									"pm.test(\"Staff userId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.staff.forEach(staff => {",
									"     pm.expect(staff.userId).to.be.not.null;",
									"    pm.expect(staff.userId).to.be.not.undefined;",
									"    pm.expect(staff.userId).not.to.eql(\"\");",
									"    });    ",
									"    }",
									");",
									"",
									"",
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200))",
									");",
									"",
									"pm.test(\"Enrollment date is enriched\", function () {",
									"    var res = pm.response.json();",
									"    res.staff.forEach(staff => {",
									"    pm.expect(staff.enrollmentDate).to.be.not.null;",
									"    }); ",
									"    }",
									");",
									"",
									"let requestData = JSON.parse(pm.request.body.raw);",
									"pm.collectionVariables.set(\"userId-1\", requestData.staff[0].userId);",
									"pm.collectionVariables.set(\"userId-2\", requestData.staff[1].userId);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"RequestInfo\":{\n      \"apiId\":\"mukta-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"Enroll the user to register\",\n      \"authToken\":\"{{token}}\"\n   },\n   \"staff\":[\n      {\n         \"registerId\":\"{{registerId}}\",\n         \"userId\":\"{{$randomUUID}}\",\n         \"tenantId\":\"{{tenantId}}\"\n      },\n            {\n         \"registerId\":\"{{registerId}}\",\n         \"userId\":\"{{$randomUUID}}\",\n         \"tenantId\":\"{{tenantId}}\"\n      }\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/staff/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"staff",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Staff - Deenroll - Single staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"pm.test(\"Staff are required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.staff).to.not.be.undefined;",
									"    pm.expect(req.staff).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var staff = req.staff[0];",
									"    pm.expect(staff.tenantId).to.be.not.null;",
									"    pm.expect(staff.tenantId).to.be.not.undefined;",
									"    pm.expect(staff.tenantId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Staff registerId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var staff = req.staff[0];",
									"    pm.expect(staff.registerId).to.be.not.null;",
									"    pm.expect(staff.registerId).to.be.not.undefined;",
									"    pm.expect(staff.registerId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Staff userId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var staff = req.staff[0];",
									"    pm.expect(staff.userId).to.be.not.null;",
									"    pm.expect(staff.userId).to.be.not.undefined;",
									"    pm.expect(staff.userId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"",
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200))",
									");",
									"",
									"pm.test(\"Deenrollment date is enriched\", function () {",
									"    var res = pm.response.json();",
									"    var deenrollmentDate = res.staff[0].deenrollmentDate;",
									"    pm.expect(deenrollmentDate).to.be.not.null;",
									"    }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"RequestInfo\":{\n      \"apiId\":\"mukta-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"Deenroll staff from register\",\n      \"authToken\":\"{{token}}\"\n   },\n   \"staff\":[\n      {\n         \"registerId\":\"{{registerId}}\",\n         \"userId\":\"{{userId}}\",\n         \"tenantId\":\"{{tenantId}}\"\n      }\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/staff/v1/_delete",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"staff",
								"v1",
								"_delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Staff - Deenroll - Validation Error - Staff already denrolled from the register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"pm.test(\"Staff are required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.staff).to.not.be.undefined;",
									"    pm.expect(req.staff).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var staff = req.staff[0];",
									"    pm.expect(staff.tenantId).to.be.not.null;",
									"    pm.expect(staff.tenantId).to.be.not.undefined;",
									"    pm.expect(staff.tenantId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Staff registerId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var staff = req.staff[0];",
									"    pm.expect(staff.registerId).to.be.not.null;",
									"    pm.expect(staff.registerId).to.be.not.undefined;",
									"    pm.expect(staff.registerId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Staff userId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var staff = req.staff[0];",
									"    pm.expect(staff.userId).to.be.not.null;",
									"    pm.expect(staff.userId).to.be.not.undefined;",
									"    pm.expect(staff.userId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"",
									"pm.test(\"Response is 400. Staff already deenrolled from the register\", () => ",
									"   pm.expect(pm.response.to.have.status(400))",
									");",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"RequestInfo\":{\n      \"apiId\":\"mukta-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"Deenroll staff from register\",\n      \"authToken\":\"{{token}}\"\n   },\n   \"staff\":[\n      {\n         \"registerId\":\"{{registerId}}\",\n         \"userId\":\"{{userId}}\",\n         \"tenantId\":\"{{tenantId}}\"\n      }\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/staff/v1/_delete",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"staff",
								"v1",
								"_delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Staff - Deenroll - Validation Error - Duplicate staff objects in deenrollment request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"pm.test(\"Staff are required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.staff).to.not.be.undefined;",
									"    pm.expect(req.staff).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"",
									"    req.staff.forEach(staff => {",
									"    pm.expect(staff.tenantId).to.be.not.null;",
									"    pm.expect(staff.tenantId).to.be.not.undefined;",
									"    pm.expect(staff.tenantId).not.to.eql(\"\");",
									"    });     ",
									"    }",
									");",
									"",
									"pm.test(\"Staff registerId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"     req.staff.forEach(staff => {",
									"     pm.expect(staff.registerId).to.be.not.null;",
									"    pm.expect(staff.registerId).to.be.not.undefined;",
									"    pm.expect(staff.registerId).not.to.eql(\"\");",
									"    });    ",
									"",
									"    }",
									");",
									"",
									"pm.test(\"Staff userId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.staff.forEach(staff => {",
									"     pm.expect(staff.userId).to.be.not.null;",
									"    pm.expect(staff.userId).to.be.not.undefined;",
									"    pm.expect(staff.userId).not.to.eql(\"\");",
									"    });    ",
									"    }",
									");",
									"",
									"pm.test(\"Response is 400. Duplicate staff objects in de enrollment request\", () => ",
									"   pm.expect(pm.response.to.have.status(400))",
									");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"RequestInfo\":{\n      \"apiId\":\"mukta-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"Deenroll staff from register\",\n      \"authToken\":\"{{token}}\"\n   },\n   \"staff\":[\n      {\n         \"registerId\":\"{{registerId}}\",\n         \"userId\":\"{{userId-1}}\",\n         \"tenantId\":\"{{tenantId}}\"\n      },\n      {\n         \"registerId\":\"{{registerId}}\",\n         \"userId\":\"{{userId-1}}\",\n         \"tenantId\":\"{{tenantId}}\"\n      }\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/staff/v1/_delete",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"staff",
								"v1",
								"_delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Staff - Deenroll - Multiple staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"pm.test(\"Staff are required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.staff).to.not.be.undefined;",
									"    pm.expect(req.staff).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"",
									"    req.staff.forEach(staff => {",
									"    pm.expect(staff.tenantId).to.be.not.null;",
									"    pm.expect(staff.tenantId).to.be.not.undefined;",
									"    pm.expect(staff.tenantId).not.to.eql(\"\");",
									"    });     ",
									"    }",
									");",
									"",
									"pm.test(\"Staff registerId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"     req.staff.forEach(staff => {",
									"     pm.expect(staff.registerId).to.be.not.null;",
									"    pm.expect(staff.registerId).to.be.not.undefined;",
									"    pm.expect(staff.registerId).not.to.eql(\"\");",
									"    });    ",
									"",
									"    }",
									");",
									"",
									"pm.test(\"Staff userId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.staff.forEach(staff => {",
									"     pm.expect(staff.userId).to.be.not.null;",
									"    pm.expect(staff.userId).to.be.not.undefined;",
									"    pm.expect(staff.userId).not.to.eql(\"\");",
									"    });    ",
									"    }",
									");",
									"",
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200))",
									");",
									"",
									"pm.test(\"Deenrollment date is enriched\", function () {",
									"    var res = pm.response.json();",
									"    res.staff.forEach(staff => {",
									"    pm.expect(staff.deenrollmentDate).to.be.not.null;",
									"    }); ",
									"    }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"RequestInfo\":{\n      \"apiId\":\"mukta-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"Deenroll staff from register\",\n      \"authToken\":\"{{token}}\"\n   },\n   \"staff\":[\n      {\n         \"registerId\":\"{{registerId}}\",\n         \"userId\":\"{{userId-1}}\",\n         \"tenantId\":\"{{tenantId}}\"\n      },\n      {\n         \"registerId\":\"{{registerId}}\",\n         \"userId\":\"{{userId-2}}\",\n         \"tenantId\":\"{{tenantId}}\"\n      }\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/staff/v1/_delete",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"staff",
								"v1",
								"_delete"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Individual Enrollment",
			"item": [
				{
					"name": "Attendee - Enroll - Attendee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"pm.test(\"Attendee are required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.attendees).to.not.be.undefined;",
									"    pm.expect(req.attendees).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var attendee = req.attendees[0];",
									"    pm.expect(attendee.tenantId).to.be.not.null;",
									"    pm.expect(attendee.tenantId).to.be.not.undefined;",
									"    pm.expect(attendee.tenantId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Attendee registerId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var attendee = req.attendees[0];",
									"    pm.expect(attendee.registerId).to.be.not.null;",
									"    pm.expect(attendee.registerId).to.be.not.undefined;",
									"    pm.expect(attendee.registerId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Attendee individualId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var attendee = req.attendees[0];",
									"    pm.expect(attendee.individualId).to.be.not.null;",
									"    pm.expect(attendee.individualId).to.be.not.undefined;",
									"    pm.expect(attendee.individualId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"",
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200))",
									");",
									"",
									"pm.test(\"Enrollment date is enriched\", function () {",
									"    var res = pm.response.json();",
									"    var enrollmentDate = res.attendees[0].enrollmentDate;",
									"    pm.expect(enrollmentDate).to.be.not.null;",
									"    }",
									");",
									"",
									"// let requestData = JSON.parse(pm.request.body.raw);",
									"// pm.collectionVariables.set(\"individualId\", requestData.attendees[0].individualId);",
									"let responseData = pm.response.json();",
									"pm.collectionVariables.set(\"attendeeEnrollmentDate\", responseData.attendees[0].enrollmentDate);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"ver\": null,\n        \"ts\": null,\n        \"action\": null,\n        \"did\": null,\n        \"key\": null,\n        \"msgId\": \"Enroll attendee to register\",\n        \"authToken\":\"{{token}}\"\n    },\n    \"attendees\":[\n         {\n            \"registerId\": \"{{registerId}}\",\n            \"individualId\": \"{{individualId-1}}\",\n            \"enrollmentDate\":null,\n            \"denrollmentDate\":null,\n            \"tenantId\":\"{{tenantId}}\"\n        }      \n\n    ]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/attendee/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"attendee",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attendee - Enroll - Validation Error - Attendee already enrolled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"pm.test(\"Attendee are required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.attendees).to.not.be.undefined;",
									"    pm.expect(req.attendees).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var attendee = req.attendees[0];",
									"    pm.expect(attendee.tenantId).to.be.not.null;",
									"    pm.expect(attendee.tenantId).to.be.not.undefined;",
									"    pm.expect(attendee.tenantId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Attendee registerId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var attendee = req.attendees[0];",
									"    pm.expect(attendee.registerId).to.be.not.null;",
									"    pm.expect(attendee.registerId).to.be.not.undefined;",
									"    pm.expect(attendee.registerId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Attendee individualId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var attendee = req.attendees[0];",
									"    pm.expect(attendee.individualId).to.be.not.null;",
									"    pm.expect(attendee.individualId).to.be.not.undefined;",
									"    pm.expect(attendee.individualId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"",
									"pm.test(\"Response is 400. Attendee already enrolled to the register\", () => ",
									"   pm.expect(pm.response.to.have.status(400))",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"ver\": null,\n        \"ts\": null,\n        \"action\": null,\n        \"did\": null,\n        \"key\": null,\n        \"msgId\": \"Enroll attendee to register\",\n        \"authToken\":\"{{token}}\"\n    },\n    \"attendees\":[\n         {\n            \"registerId\": \"{{registerId}}\",\n            \"individualId\": \"{{individualId-1}}\",\n            \"enrollmentDate\":null,\n            \"denrollmentDate\":null,\n            \"tenantId\":\"{{tenantId}}\"\n        }      \n\n    ]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/attendee/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"attendee",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attendee - Enroll - Validation Error - Duplicate attendee objects not allowed in request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"pm.test(\"Attendee are required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.attendees).to.not.be.undefined;",
									"    pm.expect(req.attendees).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"        req.attendees.forEach(attendee => {",
									"    pm.expect(attendee.tenantId).to.be.not.null;",
									"    pm.expect(attendee.tenantId).to.be.not.undefined;",
									"    pm.expect(attendee.tenantId).not.to.eql(\"\");",
									"    });    ",
									"    }",
									");",
									"",
									"pm.test(\"Attendee registerId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.attendees.forEach(attendee => {",
									"   pm.expect(attendee.registerId).to.be.not.null;",
									"    pm.expect(attendee.registerId).to.be.not.undefined;",
									"    pm.expect(attendee.registerId).not.to.eql(\"\");",
									"    });     ",
									"    }",
									");",
									"",
									"pm.test(\"Attendee individualId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.attendees.forEach(attendee => {",
									"    pm.expect(attendee.individualId).to.be.not.null;",
									"    pm.expect(attendee.individualId).to.be.not.undefined;",
									"    pm.expect(attendee.individualId).not.to.eql(\"\");",
									"    });     ",
									"    }",
									");",
									"",
									"",
									"pm.test(\"Response is 400. Duplicate attendee objects in the request\", () => ",
									"   pm.expect(pm.response.to.have.status(400))",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"ver\": null,\n        \"ts\": null,\n        \"action\": null,\n        \"did\": null,\n        \"key\": null,\n        \"msgId\": \"Enroll attendee to register\",\n        \"authToken\":\"{{token}}\"\n    },\n    \"attendees\":[\n         {\n            \"registerId\": \"{{registerId}}\",\n            \"individualId\": \"{{individualId-1}}\",\n            \"enrollmentDate\":null,\n            \"denrollmentDate\":null,\n            \"tenantId\":\"{{tenantId}}\"\n        },\n                 {\n            \"registerId\": \"{{registerId}}\",\n            \"individualId\": \"{{individualId-1}}\",\n            \"enrollmentDate\":null,\n            \"denrollmentDate\":null,\n            \"tenantId\":\"{{tenantId}}\"\n        }      \n\n    ]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/attendee/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"attendee",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attendee - Deenroll- Single Attendee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"pm.test(\"Attendees are required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.attendees).to.not.be.undefined;",
									"    pm.expect(req.attendees).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var attendee = req.attendees[0];",
									"    pm.expect(attendee.tenantId).to.be.not.null;",
									"    pm.expect(attendee.tenantId).to.be.not.undefined;",
									"    pm.expect(attendee.tenantId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Attendee registerId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var attendee = req.attendees[0];",
									"    pm.expect(attendee.registerId).to.be.not.null;",
									"    pm.expect(attendee.registerId).to.be.not.undefined;",
									"    pm.expect(attendee.registerId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Attendee individualId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var attendee = req.attendees[0];",
									"    pm.expect(attendee.individualId).to.be.not.null;",
									"    pm.expect(attendee.individualId).to.be.not.undefined;",
									"    pm.expect(attendee.individualId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"",
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200))",
									");",
									"",
									"pm.test(\"Deenrollment date is enriched\", function () {",
									"    var res = pm.response.json();",
									"    var deenrollmentDate = res.attendees[0].deenrollmentDate;",
									"    pm.expect(deenrollmentDate).to.be.not.null;",
									"    }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"RequestInfo\":{\n      \"apiId\":\"mukta-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{token}}\"\n      },\n   \"attendees\":[\n      {\n         \"registerId\": \"{{registerId}}\",\n         \"individualId\": \"{{individualId-1}}\",\n         \"enrollmentDate\":null,\n         \"denrollmentDate\":null,\n         \"tenantId\":\"{{tenantId}}\"\n      }\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/attendee/v1/_delete",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"attendee",
								"v1",
								"_delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attendee - Deenroll- Validation Error - Attendee already deenrolled from the register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"pm.test(\"Attendees are required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.attendees).to.not.be.undefined;",
									"    pm.expect(req.attendees).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var attendee = req.attendees[0];",
									"    pm.expect(attendee.tenantId).to.be.not.null;",
									"    pm.expect(attendee.tenantId).to.be.not.undefined;",
									"    pm.expect(attendee.tenantId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Attendee registerId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var attendee = req.attendees[0];",
									"    pm.expect(attendee.registerId).to.be.not.null;",
									"    pm.expect(attendee.registerId).to.be.not.undefined;",
									"    pm.expect(attendee.registerId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"pm.test(\"Attendee individualId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    var attendee = req.attendees[0];",
									"    pm.expect(attendee.individualId).to.be.not.null;",
									"    pm.expect(attendee.individualId).to.be.not.undefined;",
									"    pm.expect(attendee.individualId).not.to.eql(\"\");",
									"    }",
									");",
									"",
									"",
									"pm.test(\"Response is 400. Attendee already deenrolled from the register\", () => ",
									"   pm.expect(pm.response.to.have.status(400))",
									");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"RequestInfo\":{\n      \"apiId\":\"mukta-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{token}}\"\n      },\n   \"attendees\":[\n      {\n         \"registerId\": \"{{registerId}}\",\n         \"individualId\": \"{{individualId-1}}\",\n         \"enrollmentDate\":null,\n         \"denrollmentDate\":null,\n         \"tenantId\":\"{{tenantId}}\"\n      }\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/attendee/v1/_delete",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"attendee",
								"v1",
								"_delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attendee - Enroll - Multiple Attendees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"pm.test(\"Attendee are required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.attendees).to.not.be.undefined;",
									"    pm.expect(req.attendees).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"        req.attendees.forEach(attendee => {",
									"    pm.expect(attendee.tenantId).to.be.not.null;",
									"    pm.expect(attendee.tenantId).to.be.not.undefined;",
									"    pm.expect(attendee.tenantId).not.to.eql(\"\");",
									"    });    ",
									"    }",
									");",
									"",
									"pm.test(\"Attendee registerId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.attendees.forEach(attendee => {",
									"   pm.expect(attendee.registerId).to.be.not.null;",
									"    pm.expect(attendee.registerId).to.be.not.undefined;",
									"    pm.expect(attendee.registerId).not.to.eql(\"\");",
									"    });     ",
									"    }",
									");",
									"",
									"pm.test(\"Attendee individualId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.attendees.forEach(attendee => {",
									"    pm.expect(attendee.individualId).to.be.not.null;",
									"    pm.expect(attendee.individualId).to.be.not.undefined;",
									"    pm.expect(attendee.individualId).not.to.eql(\"\");",
									"    });     ",
									"    }",
									");",
									"",
									"",
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200))",
									");",
									"",
									"pm.test(\"Enrollment date is enriched\", function () {",
									"    var res = pm.response.json();",
									"    res.attendees.forEach(attendee => {",
									"    pm.expect(attendee.enrollmentDate).to.be.not.null;",
									"    });     ",
									"    }",
									");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"RequestInfo\": {\n        \"apiId\": \"mukta-services\",\n        \"ver\": null,\n        \"ts\": null,\n        \"action\": null,\n        \"did\": null,\n        \"key\": null,\n        \"msgId\": \"Enroll attendee to register\",\n        \"authToken\":\"{{token}}\"\n    },\n    \"attendees\":[\n         {\n            \"registerId\": \"{{registerId}}\",\n            \"individualId\": \"{{individualId-1}}\",\n            \"enrollmentDate\":null,\n            \"denrollmentDate\":null,\n            \"tenantId\":\"{{tenantId}}\"\n        },\n                 {\n            \"registerId\": \"{{registerId}}\",\n            \"individualId\": \"{{individualId-2}}\",\n            \"enrollmentDate\":null,\n            \"denrollmentDate\":null,\n            \"tenantId\":\"{{tenantId}}\"\n        }      \n\n    ]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/attendee/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"attendee",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attendee - Deenroll- Validation Error - Duplicate attendee objects in deenrollment request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"pm.test(\"Attendees are required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.attendees).to.not.be.undefined;",
									"    pm.expect(req.attendees).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"     req.attendees.forEach(attendee => {",
									"    pm.expect(attendee.tenantId).to.be.not.null;",
									"    pm.expect(attendee.tenantId).to.be.not.undefined;",
									"    pm.expect(attendee.tenantId).not.to.eql(\"\");",
									"    });    ",
									"    }",
									");",
									"",
									"pm.test(\"Attendee registerId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.attendees.forEach(attendee => {",
									"    pm.expect(attendee.registerId).to.be.not.null;",
									"    pm.expect(attendee.registerId).to.be.not.undefined;",
									"    pm.expect(attendee.registerId).not.to.eql(\"\");",
									"    });    ",
									"    }",
									");",
									"",
									"pm.test(\"Attendee individualId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.attendees.forEach(attendee => {",
									"    pm.expect(attendee.individualId).to.be.not.null;",
									"    pm.expect(attendee.individualId).to.be.not.undefined;",
									"    pm.expect(attendee.individualId).not.to.eql(\"\");",
									"    });   ",
									"    }",
									");",
									"",
									"",
									"pm.test(\"Response is 400. Duplicate attendee objects in deenrollment request.\", () => ",
									"   pm.expect(pm.response.to.have.status(400))",
									");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"RequestInfo\":{\n      \"apiId\":\"mukta-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{token}}\"\n   },\n   \"attendees\":[\n      {\n         \"registerId\": \"{{registerId}}\",\n         \"individualId\": \"{{individualId-1}}\",\n         \"enrollmentDate\":null,\n         \"denrollmentDate\":null,\n         \"tenantId\":\"{{tenantId}}\"\n      },\n            {\n         \"registerId\": \"{{registerId}}\",\n         \"individualId\": \"{{individualId-1}}\",\n         \"enrollmentDate\":null,\n         \"denrollmentDate\":null,\n         \"tenantId\":\"{{tenantId}}\"\n      }\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/attendee/v1/_delete",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"attendee",
								"v1",
								"_delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attendee - Deenroll- Multiple Attendees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RequestInfo is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.RequestInfo).to.not.be.null;",
									"    pm.expect(req.RequestInfo).to.not.be.undefined;",
									"    }",
									");",
									"",
									"pm.test(\"Attendees are required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.expect(req.attendees).to.not.be.undefined;",
									"    pm.expect(req.attendees).to.not.be.null;",
									"    }",
									");",
									"",
									"pm.test(\"TenantId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"     req.attendees.forEach(attendee => {",
									"    pm.expect(attendee.tenantId).to.be.not.null;",
									"    pm.expect(attendee.tenantId).to.be.not.undefined;",
									"    pm.expect(attendee.tenantId).not.to.eql(\"\");",
									"    });    ",
									"    }",
									");",
									"",
									"pm.test(\"Attendee registerId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.attendees.forEach(attendee => {",
									"    pm.expect(attendee.registerId).to.be.not.null;",
									"    pm.expect(attendee.registerId).to.be.not.undefined;",
									"    pm.expect(attendee.registerId).not.to.eql(\"\");",
									"    });    ",
									"    }",
									");",
									"",
									"pm.test(\"Attendee individualId is required\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    req.attendees.forEach(attendee => {",
									"    pm.expect(attendee.individualId).to.be.not.null;",
									"    pm.expect(attendee.individualId).to.be.not.undefined;",
									"    pm.expect(attendee.individualId).not.to.eql(\"\");",
									"    });   ",
									"    }",
									");",
									"",
									"",
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200))",
									");",
									"",
									"pm.test(\"Deenrollment date is enriched\", function () {",
									"    var res = pm.response.json();",
									"    res.attendees.forEach(attendee => {",
									"    pm.expect(attendee.denrollmentDate).to.be.not.null;",
									"    });   ",
									"    }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"RequestInfo\":{\n      \"apiId\":\"mukta-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{token}}\"\n   },\n   \"attendees\":[\n      {\n         \"registerId\": \"{{registerId}}\",\n         \"individualId\": \"{{individualId-1}}\",\n         \"enrollmentDate\":null,\n         \"denrollmentDate\":null,\n         \"tenantId\":\"{{tenantId}}\"\n      },\n            {\n         \"registerId\": \"{{registerId}}\",\n         \"individualId\": \"{{individualId-2}}\",\n         \"enrollmentDate\":null,\n         \"denrollmentDate\":null,\n         \"tenantId\":\"{{tenantId}}\"\n      }\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/attendee/v1/_delete",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"attendee",
								"v1",
								"_delete"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Attendance Log",
			"item": [
				{
					"name": "Attendance Log - Create - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200))",
									");",
									"",
									" setTimeout( () => {",
									"",
									"     pm.test(\"Attendance Log created successfully\", function () {",
									"    var res = pm.response.json();",
									"    var id = res.attendance[0].id;",
									"    pm.expect(id).to.be.not.null;",
									"    }",
									");",
									" ",
									" }, 1000);",
									"",
									"",
									"",
									"let responseData = pm.response.json();",
									"pm.collectionVariables.set(\"attendanceLogId\", responseData.attendance[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"RequestInfo\": {\r\n        \"apiId\": \"mukta-services\",\r\n        \"action\": \"\",\r\n        \"did\": 1,\r\n        \"key\": \"\",\r\n        \"msgId\": \"20170310130900|en_IN\",\r\n        \"requesterId\": \"\",\r\n        \"ts\": 1513579888683,\r\n        \"ver\": \".01\",\r\n        \"authToken\":\"{{token}}\"\r\n    },\r\n  \"attendance\": [\r\n        {\r\n        \"registerId\": \"{{registerId}}\",\r\n        \"individualId\": \"{{individualId-1}}\",\r\n        \"time\": {{attendeeEnrollmentDate}},\r\n        \"type\": \"ENTRY\",\r\n        \"status\": \"ACTIVE\",\r\n        \"tenantId\": \"{{tenantId}}\",\r\n        \"documentIds\":[\r\n                {\r\n                    \"documentType\": \"documentType\",\r\n                    \"fileStore\": \"fileStore\",\r\n                    \"documentUid\": \"documentUid\"\r\n                }\r\n            \r\n            ]\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/log/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"log",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attendance Log - Update - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200))",
									");",
									"",
									"pm.test(\"Attendance Log updated successfully\", function () {",
									"    var res = pm.response.json();",
									"    var status = res.attendance[0].status;",
									"    pm.expect(status).to.eql(\"INACTIVE\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"RequestInfo\": {\r\n        \"apiId\": \"mukta-services\",\r\n        \"action\": \"\",\r\n        \"did\": 1,\r\n        \"key\": \"\",\r\n        \"msgId\": \"20170310130900|en_IN\",\r\n        \"requesterId\": \"\",\r\n        \"ts\": 1513579888683,\r\n        \"ver\": \".01\",\r\n        \"authToken\":\"{{token}}\"\r\n    },\r\n  \"attendance\": [\r\n        {\r\n        \"id\": \"{{attendanceLogId}}\",\r\n        \"registerId\": \"{{registerId}}\",\r\n        \"individualId\": \"{{individualId-1}}\",\r\n        \"time\": {{attendeeEnrollmentDate}},\r\n        \"type\": \"ENTRY\",\r\n        \"status\": \"INACTIVE\",\r\n        \"tenantId\": \"{{tenantId}}\",\r\n        \"documentIds\":[\r\n                {\r\n                    \"documentType\": \"documentType\",\r\n                    \"fileStore\": \"fileStore\",\r\n                    \"documentUid\": \"documentUid\"\r\n                }\r\n            \r\n            ],\r\n            \"auditDetails\": {\r\n                \"createdBy\": \"47b5ea82-249c-4435-9646-16167fec06df\",\r\n                \"lastModifiedBy\": \"47b5ea82-249c-4435-9646-16167fec06df\",\r\n                \"createdTime\": 1671090269007,\r\n                \"lastModifiedTime\": 1671090269007\r\n            }\r\n        \r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/log/v1/_update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"log",
								"v1",
								"_update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attendance Log - Update - fail - attendanceId is not valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400))",
									");",
									"",
									"pm.test(\"Attendance Log updated successfully\", function () {",
									"    var res = pm.response.json();",
									"    var code = res.Errors[0].code;",
									"    pm.expect(code).to.eql(\"ATTENDANCE_LOG\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"RequestInfo\": {\r\n        \"apiId\": \"mukta-services\",\r\n        \"action\": \"\",\r\n        \"did\": 1,\r\n        \"key\": \"\",\r\n        \"msgId\": \"20170310130900|en_IN\",\r\n        \"requesterId\": \"\",\r\n        \"ts\": 1513579888683,\r\n        \"ver\": \".01\",\r\n        \"authToken\":\"{{token}}\"\r\n    },\r\n  \"attendance\": [\r\n        {\r\n        \"id\": \"{{$randomUUID}}\",\r\n        \"registerId\": \"{{registerId}}\",\r\n        \"individualId\": \"{{individualId}}\",\r\n        \"time\": {{attendeeEnrollmentDate}},\r\n        \"type\": \"ENTRY\",\r\n        \"status\": \"INACTIVE\",\r\n        \"tenantId\": \"{{tenantId}}\",\r\n        \"documentIds\":[\r\n                {\r\n                    \"documentType\": \"documentType\",\r\n                    \"fileStore\": \"fileStore\",\r\n                    \"documentUid\": \"documentUid\"\r\n                }\r\n            \r\n            ],\r\n            \"auditDetails\": {\r\n                \"createdBy\": \"47b5ea82-249c-4435-9646-16167fec06df\",\r\n                \"lastModifiedBy\": \"47b5ea82-249c-4435-9646-16167fec06df\",\r\n                \"createdTime\": 1671090269007,\r\n                \"lastModifiedTime\": 1671090269007\r\n            }\r\n        \r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/log/v1/_update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"log",
								"v1",
								"_update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attendance Log - Create - Fail - All logs should belong to same tenantId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400))",
									");",
									"",
									"pm.test(\"Attendance Log created successfully\", function () {",
									"    var res = pm.response.json();",
									"    var code = res.Errors[0].code;",
									"    pm.expect(code).to.eql(\"MULTIPLE_TENANTIDS\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"RequestInfo\": {\r\n        \"apiId\": \"mukta-services\",\r\n        \"action\": \"\",\r\n        \"did\": 1,\r\n        \"key\": \"\",\r\n        \"msgId\": \"20170310130900|en_IN\",\r\n        \"requesterId\": \"\",\r\n        \"ts\": 1513579888683,\r\n        \"ver\": \".01\",\r\n        \"authToken\":\"{{token}}\"\r\n    },\r\n  \"attendance\": [\r\n        {\r\n        \"registerId\": \"{{registerId}}\",\r\n        \"individualId\": \"{{individualId}}\",\r\n        \"time\": {{attendeeEnrollmentDate}},\r\n        \"type\": \"ENTRY\",\r\n        \"status\": \"ACTIVE\",\r\n        \"tenantId\": \"{{tenantId}}\",\r\n        \"documentIds\":[\r\n                {\r\n                    \"documentType\": \"documentType\",\r\n                    \"fileStore\": \"fileStore\",\r\n                    \"documentUid\": \"documentUid\"\r\n                }\r\n            \r\n            ]\r\n        },\r\n        {\r\n        \"registerId\": \"{{registerId}}\",\r\n        \"individualId\": \"{{individualId}}\",\r\n        \"time\": {{attendeeEnrollmentDate}},\r\n        \"type\": \"ENTRY\",\r\n        \"status\": \"ACTIVE\",\r\n        \"tenantId\": \"tenant.id\",\r\n        \"documentIds\":[\r\n                {\r\n                    \"documentType\": \"documentType\",\r\n                    \"fileStore\": \"fileStore\",\r\n                    \"documentUid\": \"documentUid\"\r\n                }\r\n            \r\n            ]\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/log/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"log",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attendance Log - Create - Fail - Validate Attendance Log time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400))",
									");",
									"",
									"pm.test(\"Attendance Log created successfully\", function () {",
									"    var res = pm.response.json();",
									"    var code = res.Errors[0].code;",
									"    pm.expect(code).to.eql(\"INVALID_ATTENDANCE_TIME\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"RequestInfo\": {\r\n        \"apiId\": \"mukta-services\",\r\n        \"action\": \"\",\r\n        \"did\": 1,\r\n        \"key\": \"\",\r\n        \"msgId\": \"20170310130900|en_IN\",\r\n        \"requesterId\": \"\",\r\n        \"ts\": 1513579888683,\r\n        \"ver\": \".01\",\r\n        \"authToken\":\"{{token}}\"\r\n    },\r\n  \"attendance\": [\r\n        {\r\n        \"registerId\": \"{{registerId}}\",\r\n        \"individualId\": \"{{individualId}}\",\r\n        \"time\": {{invalidRegisterEndDate}},\r\n        \"type\": \"ENTRY\",\r\n        \"status\": \"ACTIVE\",\r\n        \"tenantId\": \"{{tenantId}}\",\r\n        \"documentIds\":[\r\n                {\r\n                    \"documentType\": \"documentType\",\r\n                    \"fileStore\": \"fileStore\",\r\n                    \"documentUid\": \"documentUid\"\r\n                }\r\n            \r\n            ]\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/log/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"log",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attendance Log - Create - Fail - Register should belongs to tenenatId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400))",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"RequestInfo\": {\r\n        \"apiId\": \"mukta-services\",\r\n        \"action\": \"\",\r\n        \"did\": 1,\r\n        \"key\": \"\",\r\n        \"msgId\": \"20170310130900|en_IN\",\r\n        \"requesterId\": \"\",\r\n        \"ts\": 1513579888683,\r\n        \"ver\": \".01\",\r\n        \"authToken\":\"{{token}}\"\r\n    },\r\n  \"attendance\": [\r\n        {\r\n        \"registerId\": \"{{$randomUUID}}\",\r\n        \"individualId\": \"{{individualId}}\",\r\n        \"time\": {{attendeeEnrollmentDate}},\r\n        \"type\": \"ENTRY\",\r\n        \"status\": \"ACTIVE\",\r\n        \"tenantId\": \"{{tenantId}}\",\r\n        \"documentIds\":[\r\n                {\r\n                    \"documentType\": \"documentType\",\r\n                    \"fileStore\": \"fileStore\",\r\n                    \"documentUid\": \"documentUid\"\r\n                }\r\n            \r\n            ]\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/log/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"log",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attendance Log - Create - Fail - All logs should belong to same registerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400))",
									");",
									"",
									"pm.test(\"Attendance Log created successfully\", function () {",
									"    var res = pm.response.json();",
									"    var code = res.Errors[0].code;",
									"    pm.expect(code).to.eql(\"MULTIPLE_REGISTERIDS\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"RequestInfo\": {\r\n        \"apiId\": \"mukta-services\",\r\n        \"action\": \"\",\r\n        \"did\": 1,\r\n        \"key\": \"\",\r\n        \"msgId\": \"20170310130900|en_IN\",\r\n        \"requesterId\": \"\",\r\n        \"ts\": 1513579888683,\r\n        \"ver\": \".01\",\r\n        \"authToken\":\"{{token}}\"\r\n    },\r\n  \"attendance\": [\r\n        {\r\n        \"registerId\": \"{{registerId}}\",\r\n        \"individualId\": \"{{individualId}}\",\r\n        \"time\": {{attendeeEnrollmentDate}},\r\n        \"type\": \"ENTRY\",\r\n        \"status\": \"ACTIVE\",\r\n        \"tenantId\": \"{{tenantId}}\",\r\n        \"documentIds\":[\r\n                {\r\n                    \"documentType\": \"documentType\",\r\n                    \"fileStore\": \"fileStore\",\r\n                    \"documentUid\": \"documentUid\"\r\n                }\r\n            \r\n            ]\r\n        },\r\n        {\r\n        \"registerId\": \"{{$randomUUID}}\",\r\n        \"individualId\": \"{{individualId}}\",\r\n        \"time\": {{attendeeEnrollmentDate}},\r\n        \"type\": \"ENTRY\",\r\n        \"status\": \"ACTIVE\",\r\n        \"tenantId\": \"{{tenantId}}\",\r\n        \"documentIds\":[\r\n                {\r\n                    \"documentType\": \"documentType\",\r\n                    \"fileStore\": \"fileStore\",\r\n                    \"documentUid\": \"documentUid\"\r\n                }\r\n            \r\n            ]\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/log/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"log",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attendance Log - Create - Fail - User is not authorised",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400))",
									");",
									"",
									"pm.test(\"Attendance Log created successfully\", function () {",
									"    var res = pm.response.json();",
									"    var code = res.Errors[0].code;",
									"    pm.expect(code).to.eql(\"UNAUTHORISED_USER\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"RequestInfo\": {\r\n        \"apiId\": \"mukta-services\",\r\n        \"action\": \"\",\r\n        \"did\": 1,\r\n        \"key\": \"\",\r\n        \"msgId\": \"20170310130900|en_IN\",\r\n        \"requesterId\": \"\",\r\n        \"ts\": 1513579888683,\r\n        \"ver\": \".01\",\r\n        \"authToken\":\"{{token}}\"\r\n    },\r\n  \"attendance\": [\r\n        {\r\n        \"registerId\": \"{{$randomUUID}}\",\r\n        \"individualId\": \"{{individualId}}\",\r\n        \"time\": {{attendeeEnrollmentDate}},\r\n        \"type\": \"ENTRY\",\r\n        \"status\": \"ACTIVE\",\r\n        \"tenantId\": \"{{tenantId}}\",\r\n        \"documentIds\":[\r\n                {\r\n                    \"documentType\": \"documentType\",\r\n                    \"fileStore\": \"fileStore\",\r\n                    \"documentUid\": \"documentUid\"\r\n                }\r\n            \r\n            ]\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/log/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"log",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attendance Log - Rearch - Fail - TenantId is required",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400))",
									");",
									"",
									"pm.test(\"Attendance Log created successfully\", function () {",
									"    var res = pm.response.json();",
									"    var code = res.Errors[0].code;",
									"    pm.expect(code).to.eql(\"TENANT_ID\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"RequestInfo\": {\r\n        \"apiId\": \"mukta-services\",\r\n        \"action\": \"\",\r\n        \"did\": 1,\r\n        \"key\": \"\",\r\n        \"msgId\": \"20170310130900|en_IN\",\r\n        \"requesterId\": \"\",\r\n        \"ts\": 1513579888683,\r\n        \"ver\": \".01\",\r\n        \"authToken\":\"{{token}}\"\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/log/v1/_search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"log",
								"v1",
								"_search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attendance Log - Rearch - Fail - RegisterId is required",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400))",
									");",
									"",
									"pm.test(\"Attendance Log created successfully\", function () {",
									"    var res = pm.response.json();",
									"    var code = res.Errors[0].code;",
									"    pm.expect(code).to.eql(\"REGISTER_ID\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"RequestInfo\": {\r\n        \"apiId\": \"mukta-services\",\r\n        \"action\": \"\",\r\n        \"did\": 1,\r\n        \"key\": \"\",\r\n        \"msgId\": \"20170310130900|en_IN\",\r\n        \"requesterId\": \"\",\r\n        \"ts\": 1513579888683,\r\n        \"ver\": \".01\",\r\n        \"authToken\":\"{{token}}\"\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/log/v1/_search?tenantId={{tenantId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"log",
								"v1",
								"_search"
							],
							"query": [
								{
									"key": "tenantId",
									"value": "{{tenantId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Attendance Log - Rearch - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(200))",
									");",
									"",
									"pm.test(\"Attendance Log created successfully\", function () {",
									"    var res = pm.response.json();",
									"    pm.expect(res.attendance).to.be.not.null;",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"RequestInfo\": {\r\n        \"apiId\": \"mukta-services\",\r\n        \"action\": \"\",\r\n        \"did\": 1,\r\n        \"key\": \"\",\r\n        \"msgId\": \"20170310130900|en_IN\",\r\n        \"requesterId\": \"\",\r\n        \"ts\": 1513579888683,\r\n        \"ver\": \".01\",\r\n        \"authToken\":\"{{token}}\"\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/log/v1/_search?tenantId={{tenantId}}&registerId={{registerId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"log",
								"v1",
								"_search"
							],
							"query": [
								{
									"key": "tenantId",
									"value": "{{tenantId}}"
								},
								{
									"key": "registerId",
									"value": "{{registerId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Attendance Log - Create - Fail - required fields are missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is successful\", () => ",
									"   pm.expect(pm.response.to.have.status(400)));",
									"",
									"pm.test(\"Register Search response is received\", function () {",
									"    var res = pm.response.json();",
									"    pm.expect(res.Errors.length).to.equal(5);",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"RequestInfo\": {\r\n        \"apiId\": \"mukta-services\",\r\n        \"action\": \"\",\r\n        \"did\": 1,\r\n        \"key\": \"\",\r\n        \"msgId\": \"20170310130900|en_IN\",\r\n        \"requesterId\": \"\",\r\n        \"ts\": 1513579888683,\r\n        \"ver\": \".01\",\r\n        \"authToken\":\"{{token}}\"\r\n    },\r\n  \"attendance\": [\r\n        {\r\n        \"registerId\": null,\r\n        \"individualId\": null,\r\n        \"time\": null,\r\n        \"type\": null,\r\n        \"status\": \"ACTIVE\",\r\n        \"tenantId\": null,\r\n        \"documentIds\":[\r\n                {\r\n                    \"documentType\": \"documentType\",\r\n                    \"fileStore\": \"fileStore\",\r\n                    \"documentUid\": \"documentUid\"\r\n                }\r\n            \r\n            ]\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/attendance/log/v1/_create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendance",
								"log",
								"v1",
								"_create"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (pm.environment.get(\"base_url\").includes(\"localhost\")) {",
					"",
					"    var tenantId = \"pb.amritsar\";",
					"    var id = 1;",
					"    var uuid = \"11b0e02b-0145-4de2-bc42-c97b96264807\";",
					"",
					"    var roles = [{",
					"                    \"code\": \"SUPERUSER\",",
					"                    \"name\": \"SUPER USER\",",
					"                    \"tenantId\": tenantId",
					"                }];",
					"",
					"    var userInfo = {",
					"        \"id\": id,",
					"        \"uuid\": uuid,",
					"        \"userName\": \"\",",
					"        \"name\": \"\",",
					"        \"mobileNumber\": \"\",",
					"        \"emailId\": \"\",",
					"        \"type\": \"\",",
					"        \"roles\": roles,",
					"        \"active\": true,",
					"        \"tenantId\": \"pb.amritsar\"",
					"    };",
					"",
					"    pm.request.body.raw = pm.request.body.raw.replace('\"{{token}}\"', '\"\", \\n \"userInfo\":  ' + JSON.stringify(userInfo));",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "tenantId",
			"value": ""
		},
		{
			"key": "stateLevelTenant",
			"value": ""
		},
		{
			"key": "registerId",
			"value": ""
		},
		{
			"key": "registerNumber",
			"value": ""
		},
		{
			"key": "registerId2",
			"value": ""
		},
		{
			"key": "registerStartDate",
			"value": ""
		},
		{
			"key": "registerEndDate",
			"value": ""
		},
		{
			"key": "invalidRegisterEndDate",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "userId-1",
			"value": ""
		},
		{
			"key": "userId-2",
			"value": ""
		},
		{
			"key": "individualId",
			"value": ""
		},
		{
			"key": "attendeeEnrollmentDate",
			"value": ""
		},
		{
			"key": "individualId-1",
			"value": ""
		},
		{
			"key": "individualId-2",
			"value": ""
		},
		{
			"key": "attendanceLogId",
			"value": ""
		},
		{
			"key": "referenceId",
			"value": ""
		},
		{
			"key": "serviceCode",
			"value": ""
		}
	]
}